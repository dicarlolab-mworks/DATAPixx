%define update_interval = 1s
%define din_event_buffer_size = 4

var word_out = 0

var word_in_log = []

var word_in = -1 {
    word_in_log += [word_in]
}


iodevice/datapixx datapixx (
    update_interval = update_interval
    enable_dout_din_loopback = true
    din_event_buffer_size = din_event_buffer_size
    autostart = true
    ) {
    iochannel/datapixx_word_output (
        bit_numbers = 0:7
        value = word_out
        )
    iochannel/datapixx_word_input (
        bit_numbers = 0:7
        value = word_in
        )
}


%define wait_for_word_in (value)
    wait_for_condition (
        condition = word_in == value
        timeout = 1.5 * update_interval
        )
%end

%define assert_word_in_log (value)
    assert (word_in_log == value)
    word_in_log = []
%end


protocol {
    //
    // No wrap
    //

    // Initial word_out value of 0 is stored at buffer index 0
    word_out = 1  // buffer index 1
    word_out = 2  // buffer index 2
    wait_for_word_in (2)
    assert_word_in_log ([0, 1, 2])

    //
    // Wrap around end
    //

    word_out = 4   // buffer index 3
    word_out = 8   // buffer index 0
    word_out = 16  // buffer index 1
    wait_for_word_in (16)
    assert_word_in_log ([4, 8, 16])

    //
    // Wrap around end with overwrite, plus reset read position to start
    //

    word_out = 32   // buffer index 2
    word_out = 64   // buffer index 3
    word_out = 128  // buffer index 0
    word_out = 255  // buffer index 1
    word_out = 1    // buffer index 2
    word_out = 2    // buffer index 3
    wait_for_word_in (2)
    assert_word_in_log ([1, 2])

    //
    // No wrap
    //

    word_out = 4   // buffer index 0
    word_out = 8   // buffer index 1
    word_out = 16  // buffer index 2
    wait_for_word_in (16)
    assert_word_in_log ([4, 8, 16])
}
